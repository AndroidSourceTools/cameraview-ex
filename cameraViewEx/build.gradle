// Copyright 2018 Priyank Vasa
//
// Copyright (C) 2016 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.jetbrains.dokka-android'

ext {
    majorVersion = 2
    minorVersion = 2
    patchVersion = 2
}

android {

    signingConfigs {
        config {
            storeFile file("$rootDir/keystore.jks")
            storePassword System.getenv('KEYSTORE_PASSWORD')
            keyAlias 'android-release'
            keyPassword System.getenv('KEYALIAS_PASSWORD')
        }
    }

    compileSdkVersion rootProject.ext.sdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkLibVersion
        targetSdkVersion rootProject.ext.sdkVersion
        versionCode generateVersionCode()
        versionName generateVersionName()
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        consumerProguardFiles 'proguard-rules.pro'
        renderscriptTargetApi 21
    }

    testBuildType "stage"

    buildTypes {

        debug {
            minifyEnabled false
            useProguard false
            debuggable true
            versionNameSuffix "-debug"
        }

        stage {
            initWith debug
            versionNameSuffix "-stage"
        }

        release {
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }

    sourceSets {
        main.java.srcDirs += [
                'src/main/base',
                'src/main/api9',
                'src/main/api14',
                'src/main/api21',
                'src/main/api23',
                'src/main/sample'
        ]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

tasks.withType(Test) {
    useJUnitPlatform {
        //includeTags 'fast', 'smoke & feature-a'
        //excludeTags 'slow', 'ci'
        includeEngines 'junit-jupiter'
        excludeEngines 'junit-vintage'
    }
    systemProperty 'java.util.logging.manager', 'java.util.logging.LogManager'
    systemProperty 'junit.jupiter.conditions.deactivate', '*'
    systemProperties = [
            'junit.jupiter.extensions.autodetection.enabled': 'true',
            'junit.jupiter.testinstance.lifecycle.default'  : 'per_class'
    ]
}

dependencies {

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${rootProject.ext.kotlinVersion}"

    // Android support
    implementation "com.android.support:support-annotations:${rootProject.ext.supportVersion}"
    implementation "com.android.support:support-v4:${rootProject.ext.supportVersion}"
    implementation "com.android.support:transition:${rootProject.ext.supportVersion}"

    // KotlinX
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${rootProject.ext.coroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${rootProject.ext.coroutines}"

    // Timber
    implementation "com.jakewharton.timber:timber:${rootProject.ext.timberVersion}"

    // Unit tests
    // (Required) Writing and executing Unit Tests on the JUnit Platform
    testImplementation "org.junit.jupiter:junit-jupiter-api:${rootProject.ext.jUnit5Version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${rootProject.ext.jUnit5Version}"

    // (Optional) If you need "Parameterized Tests"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${rootProject.ext.jUnit5Version}"

    // Android tests
    androidTestImplementation("com.android.support.test:runner:${rootProject.ext.runnerVersion}") {
        exclude module: 'support-annotations'
    }
    androidTestImplementation("com.android.support.test:rules:${rootProject.ext.rulesVersion}") {
        exclude module: 'support-annotations'
    }
    androidTestImplementation("com.android.support.test.espresso:espresso-core:${rootProject.ext.espressoCoreVersion}") {
        exclude module: 'support-annotations'
    }

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'com.android.support') {
                details.useVersion rootProject.ext.supportVersion
            }
        }
    }
}

private Integer generateVersionCode() {
    return rootProject.ext.minSdkVersion * 10000000 +
            ext.majorVersion * 10000 +
            ext.minorVersion * 100 +
            ext.patchVersion
}

private String generateVersionName() {
    return "${ext.majorVersion}.${ext.minorVersion}.${ext.patchVersion}"
}

androidExtensions { experimental = true }

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ["-XXLanguage:+InlineClasses"]
        jvmTarget = "1.8"
    }
}

apply from: 'dokka.gradle'

apply from: 'publish.gradle'