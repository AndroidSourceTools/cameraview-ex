// Copyright 2018 Priyank Vasa
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

ext {
    majorVersion = 1
    minorVersion = 0
    patchVersion = 0
}

android {

    signingConfigs {
        config {
            storeFile file("$rootDir/keystore.jks")
            storePassword System.getenv('KEYSTORE_PASSWORD')
            keyAlias 'android-release'
            keyPassword System.getenv('KEYALIAS_PASSWORD')
        }
    }

    compileSdkVersion rootProject.ext.sdkVersion

    defaultConfig {
        applicationId "com.priyankvasa.android.cameraviewex"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.sdkVersion
        versionCode generateVersionCode()
        versionName generateVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        renderscriptTargetApi 21
    }

    buildTypes {

        debug {
            minifyEnabled false
            useProguard false
            debuggable true
            versionNameSuffix "-debug"
        }

        stage {
            initWith debug
            versionNameSuffix "-stage"
        }

        release {
            minifyEnabled true
            useProguard true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // cameraviewex
    implementation project(':cameraViewEx')
//    implementation "com.priyankvasa.android:cameraview-ex:2.0.0"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${rootProject.ext.kotlinVersion}"

    // Android support
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportVersion}"
    implementation "com.android.support.constraint:constraint-layout:${rootProject.ext.constraintLayoutVersion}"

    // Firebase
    implementation "com.google.firebase:firebase-core:${rootProject.ext.firebaseCore}"
    implementation "com.google.firebase:firebase-ml-vision:${rootProject.ext.firebaseMlVision}"

    // Glide
    implementation("com.github.bumptech.glide:glide:${rootProject.ext.glideVersion}") {
        exclude group: "com.android.support"
    }

    // Timber
    implementation "com.jakewharton.timber:timber:${rootProject.ext.timberVersion}"

    // Unit tests
    testImplementation "junit:junit:${rootProject.ext.junitVersion}"

    // Android tests
    androidTestImplementation("com.android.support.test:runner:${rootProject.ext.runnerVersion}") {
        exclude module: 'support-annotations'
    }
    androidTestImplementation("com.android.support.test.espresso:espresso-core:${rootProject.ext.espressoCoreVersion}") {
        exclude module: 'support-annotations'
    }

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'com.android.support') {
                details.useVersion rootProject.ext.supportVersion
            }
        }
    }
}

private Integer generateVersionCode() {
    return rootProject.ext.minSdkVersion * 10000000 +
            ext.majorVersion * 10000 +
            ext.minorVersion * 100 +
            ext.patchVersion
}

private String generateVersionName() {
    return "${ext.majorVersion}.${ext.minorVersion}.${ext.patchVersion}"
}

apply plugin: 'com.google.gms.google-services'